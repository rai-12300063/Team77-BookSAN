name: BOOKSAN CI/CD

on:
  push:
    branches:
      - main

jobs:
  ci:
    name: BookSAN CI - Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # Backend
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run Backend Tests
        working-directory: ./backend
        timeout-minutes: 10
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          PORT: ${{ secrets.PORT }}
        run: npm test

      # Frontend
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run Frontend Tests
        working-directory: ./frontend
        timeout-minutes: 10
        run: CI=true npm test -- --coverage --watchAll=false

      - name: Build Frontend
        working-directory: ./frontend
        timeout-minutes: 15
        run: npm run build

  cd:
    name: BookSAN CD - Deploy to Server
    runs-on: [self-hosted, deploy-runner]
    needs: ci
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/BOOKSAN-150-development-final')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Create Production Environment File
        working-directory: ./backend
        run: |
          touch .env
          echo "${{ secrets.PROD }}" > .env

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci --production=false

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build Frontend for Production
        working-directory: ./frontend
        timeout-minutes: 15
        run: npm run build

      - name: Check PM2 Installation
        run: |
          if ! command -v pm2 &> /dev/null; then
            echo "Installing PM2..."
            npm install -g pm2
          else
            echo "PM2 is already installed"
            pm2 --version
          fi

      - name: Stop Existing Services
        run: |
          echo "� Stopping existing services..."
          pm2 delete booksan-backend 2>/dev/null || echo "No existing booksan-backend process"
          pm2 save || true
        continue-on-error: true

      - name: Deploy with PM2
        run: |
          echo "🚀 Starting deployment..."
          chmod +x ./deploy.sh
          ./deploy.sh

      - name: Verify Deployment
        run: |
          echo "🔍 Verifying deployment..."
          sleep 10
          
          # Check if the service is running
          if pm2 list | grep -q "booksan-backend.*online"; then
            echo "✅ BookSAN backend is running successfully"
            pm2 status
            echo ""
            echo "� Recent logs:"
            pm2 logs booksan-backend --lines 10 || true
          else
            echo "❌ Deployment failed - service not running"
            pm2 logs booksan-backend --lines 20 || true
            exit 1
          fi

      - name: Health Check
        run: |
          echo "🏥 Performing health check..."
          
          # Wait for service to be fully ready
          sleep 15
          
          # Check if the service responds at the health endpoint
          if curl -f http://localhost:5001/api/test/health 2>/dev/null; then
            echo "✅ Health check passed - service is responding"
            echo "📋 Health response:"
            curl -s http://localhost:5001/api/test/health | jq . || echo "Response received but not JSON"
          else
            echo "⚠️  Health check warning - trying root endpoint..."
            if curl -f http://localhost:5001/ 2>/dev/null; then
              echo "✅ Root endpoint responding - service may still be initializing"
            else
              echo "❌ Health check failed - service not responding"
              echo "📋 Service status:"
              pm2 status
              echo "📝 Recent logs:"
              pm2 logs booksan-backend --lines 20 || true
            fi
          fi

      - name: Deployment Summary
        run: |
          echo "🎉 BookSAN deployment completed!"
          echo ""
          echo "📊 Final Status:"
          pm2 status
          echo ""
          echo "🔗 Application should be available at your server's configured port"
          echo "📝 Check logs with: pm2 logs booksan-backend"
